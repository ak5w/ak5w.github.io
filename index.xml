<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog - Ak5w</title>
    <link>https://ak5w.github.io/</link>
    <description>Recent content on Blog - Ak5w</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Mar 2024 08:13:27 +0800</lastBuildDate>
    
        <atom:link href="https://ak5w.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于我</title>
      <link>https://ak5w.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2023 21:38:52 +0800</pubDate>
      
      <guid>https://ak5w.github.io/about/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;程序员&lt;/li&gt;
&lt;li&gt;喜欢跑步，轻音乐&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>01 Api Draft</title>
      <link>https://ak5w.github.io/post/2024/03/28/01-api-draft/</link>
      <pubDate>Thu, 28 Mar 2024 08:13:27 +0800</pubDate>
      
      <guid>https://ak5w.github.io/post/2024/03/28/01-api-draft/</guid>
      
        <description>&lt;h2 id=&#34;用户服务中心-01&#34;&gt;用户服务中心 0.1&lt;/h2&gt;
&lt;h3 id=&#34;用户认证&#34;&gt;用户认证&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户名+密码 生成 jwt token 方式&lt;/li&gt;
&lt;li&gt;小程序的认证&lt;/li&gt;
&lt;li&gt;第三方平台用户认证 [ todo ]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户授权&#34;&gt;用户授权&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基于 casbin 的 rbac 模型 对所有API 接口进行授权管理。&lt;/li&gt;
&lt;li&gt;用户以部门形式被组织着，组织内又可以分配角色，用户也可以直接被以角色进行组织，角色内又才包含了对资源的控制，包括对api 和 前端按钮的访问。
&lt;ul&gt;
&lt;li&gt;jwt 中要包含 user id 和 role id array，从而可以进行授权拦截判断。另外，对外暴露的id 应具有分布式唯一性。此处应使用雪花算法生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;待定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多租户管理&#34;&gt;多租户管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;租户实际上意味着是一个在业务上隔离的应用，应该具备可扩展性，能够低成本脱离多租户，变为单租户平台。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;系统管理&#34;&gt;系统管理&lt;/h3&gt;
&lt;h1 id=&#34;go-zero-相关&#34;&gt;go-zero 相关&lt;/h1&gt;
&lt;h2 id=&#34;go-zero-模板定制&#34;&gt;go-zero 模板定制&lt;/h2&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://go-zero.dev/docs/tutorials/customization/template&#34;&gt;go-zero 模板定制化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnku.com/articles/64106&#34;&gt;go-zero统一Response的返回值(RPC端错误没有解析到)&lt;/a&gt;、&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;错误码统一设计&#34;&gt;错误码统一设计&lt;/h2&gt;
&lt;h2 id=&#34;通用api-req--resp-结构设计&#34;&gt;通用api req / resp 结构设计&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/jaxu/p/7908111.html#a_8_2&#34;&gt;RESTful服务最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;resp-结构&#34;&gt;resp 结构&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Sub-Class&lt;/th&gt;
&lt;th&gt;Optional | Mandatory&lt;/th&gt;
&lt;th&gt;Desc&lt;/th&gt;
&lt;th&gt;Remark&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;code | unsigned integer&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;response code, 0 - means normal, the others means error case on bussiness.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msg | string | not null&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;the desc for code.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data | {}interface&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;the data body.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;项目目录结构规划&#34;&gt;项目目录结构规划&lt;/h2&gt;
&lt;p&gt;pro
apps
desc
all.api
base.api
role
permission
user
&amp;hellip;
pkg
docs
scripts&lt;/p&gt;
&lt;h2 id=&#34;数据库orm工具选型&#34;&gt;数据库orm工具选型&lt;/h2&gt;
&lt;h3 id=&#34;gorm&#34;&gt;gorm&lt;/h3&gt;
&lt;h3 id=&#34;xorm&#34;&gt;xorm&lt;/h3&gt;
&lt;h3 id=&#34;ent&#34;&gt;ent&lt;/h3&gt;
&lt;h2 id=&#34;小程序登录等-poc&#34;&gt;小程序登录等 POC&lt;/h2&gt;
&lt;p&gt;做poc为明确数据库表设计等。&lt;/p&gt;
&lt;h2 id=&#34;rpc-设计&#34;&gt;rpc 设计&lt;/h2&gt;
&lt;h1 id=&#34;数据库设计相关&#34;&gt;数据库设计相关&lt;/h1&gt;
&lt;h2 id=&#34;主键id&#34;&gt;主键ID&lt;/h2&gt;
&lt;p&gt;采用改进版的雪花算法进行生成全局分布式增长的唯一 数字ID，一方面具备索引友好性，另外具备安全性
但目前又看到薄雾算法具有更好的可用性及性能，还在选型中。&lt;/p&gt;
&lt;h2 id=&#34;数据表扩展性设计&#34;&gt;数据表扩展性设计&lt;/h2&gt;
&lt;p&gt;目的
扩展性设计的目的其实就是为将来应对需求变更进行的一系列准备。在表里面新增预留的扩展字段，还有就是扩新增加直接能够存储比较长的Jason字段的这种表字段&lt;/p&gt;
&lt;p&gt;还有就是将数据库表里面不太常用到的一些数据，或者说是数据量比较少的数据可以直接存在一张字典表里面，这样能够减少一些设计开发包括测试的流程，当然这个都是以多租户为主的一个设计了。&lt;/p&gt;
&lt;h3 id=&#34;常用表字段&#34;&gt;常用表字段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据库自增id&lt;/li&gt;
&lt;li&gt;数据库表记录id uuid 雪花算法id 薄雾算法id&lt;/li&gt;
&lt;li&gt;remark / comment 字段，看根据表情形增删&lt;/li&gt;
&lt;li&gt;app_id 用于区分所属app.&lt;/li&gt;
&lt;li&gt;owner_id 用于标记信息所属用户id&lt;/li&gt;
&lt;li&gt;created_time&lt;/li&gt;
&lt;li&gt;updated_time&lt;/li&gt;
&lt;li&gt;updated_by 用于标记最近更新信息用户id.  此外，因为此处只存最后一个更新者，所以看是否需要存储该数据的变更历史记录，需要另外对更新操作进行存储处理。 包括后面的删除操作也是一样。扩充到整个系统就是对系统内的操作事件进行记录，汇总的处理。&lt;/li&gt;
&lt;li&gt;deleted_time&lt;/li&gt;
&lt;li&gt;deleted_by
&lt;ul&gt;
&lt;li&gt;这三个增删改的人员，只在这存个id合适吗？需不需要适当增加用户名字段，以此增加冗余字段来换取查询性能呢？用户界面上肯定不是要看到用户id的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;status  用于标记当前数据状态。此处看是否需要用于对数据进行冷却处理？就是一段时间内不可用，到期后进行自动更新为可用。&lt;/li&gt;
&lt;li&gt;type 字段 用于对数据功能属性用途做区分。&lt;/li&gt;
&lt;li&gt;sort 排序字段&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字典表设计&#34;&gt;字典表设计&lt;/h3&gt;
&lt;p&gt;字典表主要是为了存储少量，低更新频率的数据
，就是为了减少整个系统当中的一些重复性的找工作。&lt;/p&gt;
&lt;p&gt;另外需要考虑字典表是不是具备树形结构存储呢？一定要的 。&lt;/p&gt;
&lt;p&gt;之前设计就是要保留几个预留的字段，然后对应的还要有可扩展的json字段。&lt;/p&gt;
&lt;p&gt;字典表的缓存思考
基于字典表数据的低更新性，应该稍微持久一点存储在缓存内进行使用。
当然也要提供即可更新缓存操作。
另外，也需要考虑，缓存的大小。&lt;/p&gt;
&lt;h4 id=&#34;多租户信息-最大200条&#34;&gt;多租户信息 [最大200条]&lt;/h4&gt;
&lt;p&gt;不意味着就是一个应用单独的一个应用了，那这个信息能不能重置到200呢
一些未来需要新增的扩展字段，可直接使用到扩展json字段了。
后续其他表的预估量都依据这个多租户的200条最大上限来评估。&lt;/p&gt;
&lt;p&gt;需要存储对应的小程序密钥等其他额外信息。&lt;/p&gt;
&lt;h4 id=&#34;用户组信息100条--总-2w&#34;&gt;用户组信息[100条]  总 2w&lt;/h4&gt;
&lt;p&gt;组类型？实体组或虚拟组？
实际业务中，可能会存在跨部门协同成立新的项目组，这种并非依据实体组织的用户组。&lt;/p&gt;
&lt;h4 id=&#34;角色信息-50条-总-1w&#34;&gt;角色信息 [50条] 总 1w&lt;/h4&gt;
&lt;h4 id=&#34;管理后台菜单资源信息100条&#34;&gt;管理后台菜单资源信息[100条]&lt;/h4&gt;
&lt;h4 id=&#34;应用菜单资源信息100条&#34;&gt;应用菜单资源信息[100条]&lt;/h4&gt;
&lt;p&gt;系统api信息[200条]&lt;/p&gt;
&lt;h3 id=&#34;表数据量预估&#34;&gt;表数据量预估&lt;/h3&gt;
&lt;p&gt;在设计表数据库的时候对整个这张表未来可能的数据量的一个评估了，每张表设计的时候都要有这样的一个预估记录了，包括数据量评估所依据的因素，这个都要列出来，因为这个会与实际的情况进行一个核实比对，看自己预判在什么地方有问题，然后再一个就是因为对这个数据量的预估呢，会影响这个表的设计了，就是这样子。&lt;/p&gt;
&lt;h3 id=&#34;雪花算法&#34;&gt;雪花算法&lt;/h3&gt;
&lt;h3 id=&#34;薄雾算法&#34;&gt;薄雾算法&lt;/h3&gt;
&lt;h1 id=&#34;缓存相关&#34;&gt;缓存相关&lt;/h1&gt;
&lt;h2 id=&#34;缓存操作军规&#34;&gt;缓存操作军规？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所以缓存写入都要有过期期限。&lt;/li&gt;
&lt;li&gt;缓存刷新操作要求：先更新数据库，再删除缓存记录？&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据一致性操作要求&lt;/p&gt;
&lt;p&gt;需要在后台管理侧，提供手动（也可有自动job进行）缓存更新操作。自动job 在于特定应用进行定期更新操作。&lt;/p&gt;
&lt;p&gt;热点数据评估？&lt;/p&gt;
&lt;h1 id=&#34;测试相关&#34;&gt;测试相关&lt;/h1&gt;
&lt;h2 id=&#34;性能压测&#34;&gt;性能压测&lt;/h2&gt;
&lt;p&gt;主要可通过云主机作为外网入口，云主机上本身就有rpc service, 然后通过内网穿透，在本地新增rpc 服务，使得云主机进入的流量能够分发到本地rpc 服务上。以此来观察整个并发量的情况。&lt;/p&gt;
&lt;p&gt;（todo）另外对于增加rpc的操作能不能做到无缝无感新增或者去除，就是说是可以直接自动的注册到服务发现服务中心，然后就可以完成流量的分发，并且能够有可视化的观测工具，能够查看到整个流量的情况，就是在某一端rpc上面运行的流量情况包括资源。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>02 Slice</title>
      <link>https://ak5w.github.io/post/2024/03/23/02-slice/</link>
      <pubDate>Sat, 23 Mar 2024 11:48:47 +0800</pubDate>
      
      <guid>https://ak5w.github.io/post/2024/03/23/02-slice/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>01 - Docker 常用操作</title>
      <link>https://ak5w.github.io/post/2024/01/05/01-docker-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 05 Jan 2024 16:47:31 +0800</pubDate>
      
      <guid>https://ak5w.github.io/post/2024/01/05/01-docker-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;本篇为日常 docker的一些使用笔记，是在 docker 环境准备好后进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装部分请参考 &lt;a href=&#34;https://ak5w.github.io/post/2024/01/05/00-docker-%E5%AE%89%E8%A3%85/&#34;&gt;00-docker-安装&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-镜像操作&#34;&gt;1. 镜像操作&lt;/h2&gt;
&lt;p&gt;镜像是运行容器的前提，官方的Docker Hub网站已经提供了数十万个镜像供大家开放下载。可以使用docker pull命令直接从Docker Hub镜像源来下载镜像。&lt;/p&gt;
&lt;h3 id=&#34;11-获取镜像&#34;&gt;1.1 获取镜像&lt;/h3&gt;
&lt;p&gt;获取镜像命令的格式为docker pull NAME[：TAG]。其中，NAME是镜像仓库的名称（用来区分镜像），TAG是镜像的标签（往往用来表示版本信息）。通常情况下，描述一个镜像需要包括“名称+标签”信息。&lt;/p&gt;
&lt;h3 id=&#34;12-查看镜像信息&#34;&gt;1.2 查看镜像信息&lt;/h3&gt;
&lt;h3 id=&#34;13-搜寻镜像&#34;&gt;1.3 搜寻镜像&lt;/h3&gt;
&lt;p&gt;使用docker search命令可以搜索远端仓库中共享的镜像，默认搜索官方仓库中的镜像。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ sudo docker search debian
NAME                                  DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED
ubuntu                                Ubuntu is a Debian-based Linux operating sys…   16739     [OK]       
debian                                Debian is a Linux distribution that&amp;#39;s compos…   4897      [OK]       
neurodebian                           NeuroDebian provides neuroscience research s…   105       [OK]       
bitnami/debian-base-buildpack         Debian base compilation image                    2                    [OK]
kasmweb/debian-bullseye-desktop       Debian Bullseye desktop for Kasm Workspaces      6                    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、星级（表示该镜像的受欢迎程度）、是否官方创建、是否自动创建等。
默认的输出结果将按照星级评价进行排序。&lt;/p&gt;
&lt;h3 id=&#34;14-删除镜像&#34;&gt;1.4 删除镜像&lt;/h3&gt;
&lt;h3 id=&#34;15-创建镜像&#34;&gt;1.5 创建镜像&lt;/h3&gt;
&lt;h3 id=&#34;16-存储和载入镜像&#34;&gt;1.6 存储和载入镜像&lt;/h3&gt;
&lt;h3 id=&#34;17-上传镜像&#34;&gt;1.7 上传镜像&lt;/h3&gt;
&lt;p&gt;可以使用docker push命令上传镜像到仓库，默认上传到Docker Hub官方仓库（需要登录）&lt;/p&gt;
&lt;h2 id=&#34;2-容器操作&#34;&gt;2. 容器操作&lt;/h2&gt;
&lt;h3 id=&#34;删除容器&#34;&gt;删除容器&lt;/h3&gt;
&lt;p&gt;可以使用docker rm命令来删除处于终止或退出状态的容器.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ sudo docker ps -a
CONTAINER ID   IMAGE       COMMAND                   CREATED       STATUS                   PORTS                                                  NAMES
92d204af69d3   mysql:5.7   &amp;#34;docker-entrypoint.s…&amp;#34;   6 hours ago   Exited (1) 6 hours ago                                                          brave_williamson
b0904d2cb1fa   mysql:5.7   &amp;#34;docker-entrypoint.s…&amp;#34;   7 days ago    Up 9 minutes             0.0.0.0:3306-&amp;gt;3306/tcp, :::3306-&amp;gt;3306/tcp, 33060/tcp   mysql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开始删除&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ sudo docker rm 92d
92d
❯ sudo docker ps -a
CONTAINER ID   IMAGE       COMMAND                   CREATED      STATUS          PORTS                                                  NAMES
b0904d2cb1fa   mysql:5.7   &amp;#34;docker-entrypoint.s…&amp;#34;   7 days ago   Up 14 minutes   0.0.0.0:3306-&amp;gt;3306/tcp, :::3306-&amp;gt;3306/tcp, 33060/tcp   mysql
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;删除运行中的容器&#34;&gt;删除运行中的容器&lt;/h4&gt;
&lt;p&gt;默认情况下，docker rm命令只能删除处于终止或退出状态的容器，并不能删除还处于运行状态的容器。
如果要直接删除一个运行中的容器，可以添加-f参数。Docker会先发送SIGKILL信号给容器，终止其中的应用，之后强行删除，如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ sudo docker ps -a
CONTAINER ID   IMAGE       COMMAND                   CREATED      STATUS          PORTS                                                  NAMES
b0904d2cb1fa   mysql:5.7   &amp;#34;docker-entrypoint.s…&amp;#34;   7 days ago   Up 15 minutes   0.0.0.0:3306-&amp;gt;3306/tcp, :::3306-&amp;gt;3306/tcp, 33060/tcp   mysql
❯ sudo docker rm b09
Error response from daemon: You cannot remove a running container b0904d2cb1fa0c963767f9d466d93d8bbb089ad6fb6775a7ca02134d4a63440c. Stop the container before attempting removal or force remove
❯ sudo docker rm -f b09
b09
❯ sudo docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-访问-docker-仓库&#34;&gt;3. 访问 Docker 仓库&lt;/h2&gt;
&lt;h2 id=&#34;4-docker-数据管理&#34;&gt;4. Docker 数据管理&lt;/h2&gt;
&lt;h2 id=&#34;5-端口映射与容器互联&#34;&gt;5. 端口映射与容器互联&lt;/h2&gt;
&lt;h2 id=&#34;6-使用-dockerfile-创建镜像&#34;&gt;6. 使用 dockerfile 创建镜像&lt;/h2&gt;
</description>
      
    </item>
    
    <item>
      <title>00 - Docker 安装</title>
      <link>https://ak5w.github.io/post/2024/01/05/00-docker-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 05 Jan 2024 16:37:31 +0800</pubDate>
      
      <guid>https://ak5w.github.io/post/2024/01/05/00-docker-%E5%AE%89%E8%A3%85/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;本篇为 《深入浅出Docker》该书学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0-为什么学习-docker&#34;&gt;0. 为什么学习 Docker&lt;/h2&gt;
&lt;p&gt;容器化应用已是目前的事实，至少需要学会使用该工具。&lt;/p&gt;
&lt;h2 id=&#34;1-容器概览&#34;&gt;1. 容器概览&lt;/h2&gt;
&lt;p&gt;很好的一个例子是： 在某地从零开始搭建一座房子， 结果需要搬家，只好在另处又从零开始。
容器的出现，让这一切变得“可复用”，一次搭好，随处可用，并且可靠。&lt;/p&gt;
&lt;h3 id=&#34;虚拟机的不足&#34;&gt;虚拟机的不足&lt;/h3&gt;
&lt;p&gt;VMware的虚拟机是在硬件层面上构建虚拟构建应用， 不足在于VMware本身需要依赖专用操作系统，且VMware 本身占用资源。
因此，容器化技术便是为了解决虚拟机的不足而出现。容器的运行不会独占操作系统，还具有启动快和便于迁移等优势。&lt;/p&gt;
&lt;h2 id=&#34;2-docker-介绍&#34;&gt;2. Docker 介绍&lt;/h2&gt;
&lt;h2 id=&#34;3-docker-安装&#34;&gt;3. Docker 安装&lt;/h2&gt;
&lt;h3 id=&#34;31-ubuntu-上使用-docker-仓库安装-ce-版本&#34;&gt;3.1 Ubuntu 上使用 Docker 仓库安装 ce 版本&lt;/h3&gt;
&lt;p&gt;Ubuntu 官方的版本库中并不一定是 Docker 最新的安装包，为了保证是最新版，我们从 Docker 官方库来安装。
首先，更新现有的软件包列表：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：如果无法更新，可能是你的软件源指向是国外的服务器，很可能已经被墙。所有首次更新请打开 VPN。&lt;/p&gt;
&lt;p&gt;接下来，安装一些必备软件包，让 apt 通过 HTTPS 使用软件包。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install apt-transport-https ca-certificates curl software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后将官方 Docker 版本库的 GPG 密钥添加到系统中：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行后显示&lt;/p&gt;
&lt;p&gt;OK
将 Docker 版本库添加到APT源：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行后显示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Get:1 https://download.docker.com/linux/ubuntu focal InRelease [36.2 kB]                                
Hit:2 http://cn.archive.ubuntu.com/ubuntu focal InRelease                                               
Get:3 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages [3056 B]
Hit:4 http://cn.archive.ubuntu.com/ubuntu focal-updates InRelease
Hit:5 http://cn.archive.ubuntu.com/ubuntu focal-backports InRelease
Hit:6 http://cn.archive.ubuntu.com/ubuntu focal-security InRelease
Fetched 39.2 kB in 2s (16.1 kB/s)
Reading package lists... Done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来，我们用新添加的 Docker 软件包来进行升级更新。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;确保要从 Docker 版本库，而不是默认的 Ubuntu 版本库进行安装：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apt-cache policy docker-ce
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行后会看到这样的结果（ Docker 的版本号可能略有不同）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker-ce:
  Installed: (none)
  Candidate: 5:20.10.13~3-0~ubuntu-focal
  Version table:
     5:20.10.13~3-0~ubuntu-focal 500
        500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
     5:20.10.12~3-0~ubuntu-focal 500
        500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
     5:20.10.11~3-0~ubuntu-focal 500
        500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
     5:20.10.10~3-0~ubuntu-focal 500
        500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，到目前这一步docker-ce还未安装，但根据上一步中的列表，可以看到 docker-ce 来自 Docker 官方版本库。&lt;/p&gt;
&lt;p&gt;最后，安装 Docker ：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install docker-ce
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在 Docker 已经安装完毕。
查看 docker 安装版本信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$docker --version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们启动守护程序。检查 Docker 是否正在运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo systemctl status docker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行结果类似以下内容，说明该服务处于活动状态并且正在运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;● docker.service - Docker Application Container Engine
     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)
     Active: active (running) since Sat 2020-07-08 02:55:20 UTC; 5min ago
TriggeredBy: ● docker.socket
       Docs: https://docs.docker.com
   Main PID: 4287 (dockerd)
      Tasks: 8
     Memory: 36.4M
     CGroup: /system.slice/docker.service
             └─4287 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果要使用 Docker 作为非 root 用户，则应考虑使用类似以下方式将用户添加到 docker 组：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo usermod -aG docker your-user
$ cat /etc/group | grep docker
docker❌999:your-user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果当前登录用户就是要添加到Docker组中的用户的话，则需要重新登录，组权限设置才会生效。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kalacloud.com/blog/how-to-install-and-use-docker-on-ubuntu/&#34;&gt;https://kalacloud.com/blog/how-to-install-and-use-docker-on-ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;32-卸载-docker&#34;&gt;3.2 卸载 docker&lt;/h3&gt;
&lt;p&gt;删除安装包：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get remove docker docker-engine docker-ce docker.io -y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除镜像、容器、配置文件等内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo rm -rf /var/lib/docker
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-docker-升级&#34;&gt;3.3 Docker 升级&lt;/h3&gt;
&lt;p&gt;（1）停止Docker守护程序。（2）移除旧版本Docker。（3）安装新版本Docker。（4）配置新版本的Docker为开机自启动。（5）确保容器重启成功。&lt;/p&gt;
&lt;h3 id=&#34;34-docker-存储驱动的选择&#34;&gt;3.4 Docker 存储驱动的选择&lt;/h3&gt;
&lt;p&gt;每个Docker容器都有一个本地存储空间，用于保存层叠的镜像（Image Layer）以及挂载的容器文件系统，默认情况下，容器的所有读写操作都发生在镜像层上或挂载的文件系统中
本地存储是通过存储驱动（Storage Driver）进行管理，也被称为Graph Driver&lt;/p&gt;
&lt;p&gt;在Linux上，Docker可选择的一些存储驱动包括AUFS（最原始也是最老的）、Overlay2（可能是未来的最佳选择）、Device Mapper、Btrfs和ZFS。
在Linux上，读者可以通过修改/etc/docker/daemon.json文件来修改存储引擎配置，修改完成之后需要重启Docker才能够生效&lt;/p&gt;
&lt;h2 id=&#34;4-纵观-docker&#34;&gt;4. 纵观 Docker&lt;/h2&gt;
&lt;h3 id=&#34;41-运维视角&#34;&gt;4.1 运维视角&lt;/h3&gt;
&lt;h4 id=&#34;镜像&#34;&gt;镜像：&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查看镜像
$ docker image ls

# 拉取镜像
$ docker image pull ubuntu:latest
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;容器&#34;&gt;容器&lt;/h4&gt;
&lt;h3 id=&#34;42-开发视角&#34;&gt;4.2 开发视角&lt;/h3&gt;
&lt;p&gt;会分析一份应用代码中的Dockerfile并将其容器化，最终以容器的方式运行&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>01 Golang 开发环境准备</title>
      <link>https://ak5w.github.io/post/2024/01/02/01-golang-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link>
      <pubDate>Tue, 02 Jan 2024 23:17:40 +0800</pubDate>
      
      <guid>https://ak5w.github.io/post/2024/01/02/01-golang-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid>
      
        <description>&lt;h2 id=&#34;golang-开发环境设置&#34;&gt;golang 开发环境设置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;有关go语言的介绍可以在 &lt;a href=&#34;https://zh.wikipedia.org/zh-cn/Go&#34;&gt;https://zh.wikipedia.org/zh-cn/Go&lt;/a&gt; 或官网查看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1-golang-安装&#34;&gt;1. golang 安装&lt;/h3&gt;
&lt;p&gt;最新版本可在 &lt;a href=&#34;https://golang.google.cn/dl/&#34;&gt;The Go Programming Language&lt;/a&gt;  或  &lt;a href=&#34;https://studygolang.com/dl&#34;&gt;Go 语言中文网&lt;/a&gt; 上下载
本文仅提供在&lt;code&gt;Linux&lt;/code&gt;的安装方法，其他环境请自行查阅&lt;/p&gt;
&lt;h4 id=&#34;11-linux上安装&#34;&gt;1.1 Linux上安装&lt;/h4&gt;
&lt;p&gt;可通过如下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://studygolang.com/dl/golang/go1.17.3.linux-amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar -zxvf go1.17.3.linux-amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo go /usr/local
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并在 ~/.profile 文件中添加如下环境变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GOROOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/xxx/go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$GOROOT/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GOPROXY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://goproxy.cn, direct
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$GOPATH/bin:$GOROOT/bin:$PATH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 通过 source ~/.profile 使配置生效。可通过 go version 检查安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  ~ go version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version go1.17.3 linux/amd64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可通过 go env 命令查看各项配置&lt;/p&gt;
&lt;h4 id=&#34;12-gopath-配置&#34;&gt;1.2 GoPATH 配置&lt;/h4&gt;
&lt;p&gt;自从Golang采用Module的方式管理项目后，GOPATH目录已经不是那么重要了，目前主要用来存放依赖的Module库，生成的可执行文件等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bin文件夹存放&lt;code&gt;go install&lt;/code&gt;命名生成的可执行文件，可以把GOPATH/bin路径加入到PATH环境变量里，如上面配置的GOROOT/bin一样，这样就直接在终端里使用我们go开发的程序了。&lt;/li&gt;
&lt;li&gt;pkg文件夹是存在go编译生成的文件。&lt;/li&gt;
&lt;li&gt;src存放的是非Go Module项目源代码。&lt;/li&gt;
&lt;li&gt;GOROOT 指定了Go 的安装路径&lt;/li&gt;
&lt;li&gt;GOPATH 指定了 Go 引用包的存储路径，类似于 Java 体系中的 maven 一样&lt;/li&gt;
&lt;li&gt;GOPROXY&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-vscode-配置-go-开发环境&#34;&gt;2. vscode 配置 go 开发环境&lt;/h3&gt;
&lt;p&gt;Go语言是采用UTF8编码的，可使用任何文本编辑器开发。在这里使用 VS Code。
&lt;a href=&#34;https://www.liwenzhou.com/posts/Go/00_go_in_vscode/&#34;&gt;VS code 配置Go语言开发环境&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-hellogolang&#34;&gt;3. hello,golang&lt;/h3&gt;
&lt;p&gt;按惯例，我们的 hello 程序按如下步骤建立：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  ~ sudo mkdir go-demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  ~ cd go-demo 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  ~ go mod init go-demo    &lt;span style=&#34;color:#75715e&#34;&gt;# 会生成 go.mod 文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  ~ touch main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 main.go 中，写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, golang world&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行 go build main.go， 然后运行编译好的可执行文件:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  ~ ./main 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, golang world
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此，我们的 hello 程序已运行成功，诸行代码详解如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package main：声明了 main.go 所在的包，Go 语言中使用包来组织代码。一个文件夹即一个包，包内可以暴露类型或方法供其他包使用。&lt;/li&gt;
&lt;li&gt;import “fmt”：fmt 是 Go 语言的一个标准库/包，用来处理标准输入输出。&lt;/li&gt;
&lt;li&gt;func main：main 函数是整个程序的入口，main 函数所在的包名也&lt;strong&gt;必须&lt;/strong&gt;为 &lt;code&gt;main&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;fmt.Println(“Hello, golang world”)：调用 fmt 包的 Println 方法，打印出 “Hello World!”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-使用-dlv-调试-go-程序&#34;&gt;4. 使用 dlv 调试 go 程序&lt;/h3&gt;
&lt;p&gt;在本节，介绍如何使用 &lt;code&gt;dlv&lt;/code&gt;进行 &lt;code&gt;go&lt;/code&gt;程序调试&lt;/p&gt;
&lt;h4 id=&#34;41-dlv-的安装&#34;&gt;4.1 dlv 的安装&lt;/h4&gt;
&lt;p&gt;在golang 项目目录下执行如下命令，即可将 dlv 安装至 &lt;code&gt;$GO_PATH&lt;/code&gt;所在目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get github.com/derekparker/delve/cmd/dlv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;dlv -h&lt;/code&gt;获取帮助信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Delve is a source level debugger &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Go programs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Delve enables you to interact with your program by controlling the execution of the process,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;evaluating variables, and providing information of thread / goroutine state, CPU register state and more.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The goal of this tool is to provide a simple yet powerful interface &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; debugging Go programs.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pass flags to the program you are debugging using &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;--&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; example:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;dlv exec ./hello -- server --config conf/config.toml&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dlv &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;command&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Available Commands:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  attach      Attach to running process and begin debugging.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  connect     Connect to a headless debug server with a terminal client.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  core        Examine a core dump.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dap         Starts a headless TCP server communicating via Debug Adaptor Protocol &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DAP&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  debug       Compile and begin debugging main package in current directory, or the package specified.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exec        Execute a precompiled binary, and begin a debug session.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  help        Help about any command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  run         Deprecated command. Use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt; instead.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  test        Compile test binary and begin debugging program.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  trace       Compile and begin tracing program.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  version     Prints version.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Flags:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --accept-multiclient               Allows a headless server to accept multiple client connections via JSON-RPC or DAP.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --allow-non-terminal-interactive   Allows interactive sessions of Delve that don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t have a terminal as stdin, stdout and stderr
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --api-version int                  Selects JSON-RPC API version when headless. New clients should use v2. Can be reset via RPCServer.SetApiVersion. See Documentation/api/json-rpc/README.md. (default 1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --backend string                   Backend selection (see &amp;#39;&lt;/span&gt;dlv help backend&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;). (default &amp;#34;default&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --build-flags string               Build flags, to be passed to the compiler. For example: --build-flags=&amp;#34;-tags=integration -mod=vendor -cover -v&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --check-go-version                 Exits if the version of Go in use is not compatible (too old or too new) with the version of Delve. (default true)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --disable-aslr                     Disables address space randomization
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --headless                         Run debug server only, in headless mode. Server will accept both JSON-RPC or DAP client connections.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -h, --help                             help for dlv
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --init string                      Init file, executed by the terminal client.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -l, --listen string                    Debugging server listen address. (default &amp;#34;127.0.0.1:0&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --log                              Enable debugging server logging.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --log-dest string                  Writes logs to the specified file or file descriptor (see &amp;#39;&lt;/span&gt;dlv help log&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --log-output string                Comma separated list of components that should produce debug output (see &amp;#39;&lt;/span&gt;dlv help log&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      --only-same-user                   Only connections from the same user that started this instance of Delve are allowed to connect. (default true)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  -r, --redirect stringArray             Specifies redirect rules for target process (see &amp;#39;&lt;/span&gt;dlv help redirect&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --wd string                        Working directory &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; running the program.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Additional help topics:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dlv backend  Help about the --backend flag.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dlv log      Help about logging flags.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dlv redirect Help about file redirection.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dlv [command] --help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more information about a command.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/realjimmy/p/13418508.html&#34;&gt;https://www.cnblogs.com/realjimmy/p/13418508.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-golang-文档查询&#34;&gt;5. golang 文档查询&lt;/h3&gt;
</description>
      
    </item>
    
  </channel>
</rss>
